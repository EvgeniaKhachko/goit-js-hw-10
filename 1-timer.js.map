{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nlet userSelectedDate;\nlet currentDate;\nlet msLeft = 0;\nconst actionButton = document.querySelector('button');\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      if (msLeft != 0) {\n        return;\n      }\n      userSelectedDate = new Date(selectedDates[0]);\n      currentDate =  new Date();\n      if (userSelectedDate > currentDate) {\n        actionButton.disabled = false; \n        msLeft = userSelectedDate.getTime() - currentDate.getTime();\n      } else {\n        actionButton.disabled = true; \n        iziToast.show({\n          title: 'Hey',\n          message: 'Please choose a date in the future'\n        });\n        msLeft = 0;\n      }\n\n    }\n  };\n  \nconst dataPicker = new flatpickr('#datetime-picker', options);\nactionButton.addEventListener('click', function(){\n  dataPicker.disabled = true;\n  let msLeft = userSelectedDate.getTime()  - currentDate.getTime(); \n\n  let timerFunction = setInterval(function () { \n    if (msLeft <= 0) {\n      clearInterval(timerFunction);\n      dataPicker.disabled = false;\n\n    } else {\n      const leftTimeFormatted = convertMs(msLeft);\n      for(let fragment in leftTimeFormatted) {\n        const spanTime = document.querySelector(`span[data-${fragment}]`);\n        if (spanTime !== null) {\n          spanTime.textContent = formatVal(leftTimeFormatted[fragment]);\n        } \n      } \n      msLeft = msLeft -1000;\n    }\n   }, 1000)\n\n   actionButton.disabled = true; \n\n});\n\n\n\n\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction formatVal(val) {\n  val = new String(val);\n  if (val.length < 2) {\n    val = \"0\"+ val;\n  }\n  return val;\n}"],"names":["userSelectedDate","currentDate","msLeft","actionButton","options","selectedDates","iziToast","dataPicker","flatpickr","timerFunction","leftTimeFormatted","convertMs","fragment","spanTime","formatVal","ms","days","hours","minutes","seconds","val"],"mappings":"+IAMA,IAAIA,EACAC,EACAC,EAAS,EACb,MAAMC,EAAe,SAAS,cAAc,QAAQ,EAC9CC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBH,GAAU,IAGdF,EAAmB,IAAI,KAAKK,EAAc,CAAC,CAAC,EAC5CJ,EAAe,IAAI,KACfD,EAAmBC,GACrBE,EAAa,SAAW,GACxBD,EAASF,EAAiB,QAAS,EAAGC,EAAY,QAAO,IAEzDE,EAAa,SAAW,GACxBG,EAAS,KAAK,CACZ,MAAO,MACP,QAAS,oCACnB,CAAS,EACDJ,EAAS,GAGZ,CACL,EAEMK,EAAa,IAAIC,EAAU,mBAAoBJ,CAAO,EAC5DD,EAAa,iBAAiB,QAAS,UAAU,CAC/CI,EAAW,SAAW,GACtB,IAAIL,EAASF,EAAiB,QAAS,EAAIC,EAAY,QAAO,EAE1DQ,EAAgB,YAAY,UAAY,CAC1C,GAAIP,GAAU,EACZ,cAAcO,CAAa,EAC3BF,EAAW,SAAW,OAEjB,CACL,MAAMG,EAAoBC,EAAUT,CAAM,EAC1C,QAAQU,KAAYF,EAAmB,CACrC,MAAMG,EAAW,SAAS,cAAc,aAAaD,CAAQ,GAAG,EAC5DC,IAAa,OACfA,EAAS,YAAcC,EAAUJ,EAAkBE,CAAQ,CAAC,EAE/D,CACDV,EAASA,EAAQ,GAClB,CACD,EAAE,GAAI,EAEPC,EAAa,SAAW,EAE3B,CAAC,EAMD,SAASQ,EAAUI,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAUM,EAAK,CACtB,OAAAA,EAAM,IAAI,OAAOA,CAAG,EAChBA,EAAI,OAAS,IACfA,EAAM,IAAKA,GAENA,CACT"}